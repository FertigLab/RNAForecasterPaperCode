#####################################################
import numpy as np
# This file is created automatically
def Model(Y,t,pars):
    # Parameters
    a_Coup_Fgf8 = pars[0]
    a_Coup_Fgf8_Sp8 = pars[1]
    a_Coup_Sp8 = pars[2]
    a_Emx2_Coup = pars[3]
    a_Emx2_Coup_Fgf8 = pars[4]
    a_Emx2_Coup_Fgf8_Pax6 = pars[5]
    a_Emx2_Coup_Fgf8_Sp8 = pars[6]
    a_Emx2_Coup_Fgf8_Sp8_Pax6 = pars[7]
    a_Emx2_Coup_Pax6 = pars[8]
    a_Emx2_Coup_Sp8 = pars[9]
    a_Emx2_Coup_Sp8_Pax6 = pars[10]
    a_Emx2_Fgf8 = pars[11]
    a_Emx2_Fgf8_Pax6 = pars[12]
    a_Emx2_Fgf8_Sp8 = pars[13]
    a_Emx2_Fgf8_Sp8_Pax6 = pars[14]
    a_Emx2_Pax6 = pars[15]
    a_Emx2_Sp8 = pars[16]
    a_Emx2_Sp8_Pax6 = pars[17]
    a_Fgf8_Emx2 = pars[18]
    a_Fgf8_Fgf8 = pars[19]
    a_Fgf8_Fgf8_Emx2 = pars[20]
    a_Fgf8_Fgf8_Sp8 = pars[21]
    a_Fgf8_Fgf8_Sp8_Emx2 = pars[22]
    a_Fgf8_Sp8 = pars[23]
    a_Fgf8_Sp8_Emx2 = pars[24]
    a_Pax6_Coup = pars[25]
    a_Pax6_Coup_Emx2 = pars[26]
    a_Pax6_Coup_Sp8 = pars[27]
    a_Pax6_Coup_Sp8_Emx2 = pars[28]
    a_Pax6_Emx2 = pars[29]
    a_Pax6_Sp8 = pars[30]
    a_Pax6_Sp8_Emx2 = pars[31]
    a_Sp8_Emx2 = pars[32]
    a_Sp8_Fgf8 = pars[33]
    a_Sp8_Fgf8_Emx2 = pars[34]
    alpha_Coup = pars[35]
    alpha_Emx2 = pars[36]
    alpha_Fgf8 = pars[37]
    alpha_Pax6 = pars[38]
    alpha_Sp8 = pars[39]
    k_Coup = pars[40]
    k_Emx2 = pars[41]
    k_Fgf8 = pars[42]
    k_Pax6 = pars[43]
    k_Sp8 = pars[44]
    l_p_Coup = pars[45]
    l_p_Emx2 = pars[46]
    l_p_Fgf8 = pars[47]
    l_p_Pax6 = pars[48]
    l_p_Sp8 = pars[49]
    l_x_Coup = pars[50]
    l_x_Emx2 = pars[51]
    l_x_Fgf8 = pars[52]
    l_x_Pax6 = pars[53]
    l_x_Sp8 = pars[54]
    m_Coup = pars[55]
    m_Emx2 = pars[56]
    m_Fgf8 = pars[57]
    m_Pax6 = pars[58]
    m_Sp8 = pars[59]
    n_Coup = pars[60]
    n_Emx2 = pars[61]
    n_Fgf8 = pars[62]
    n_Pax6 = pars[63]
    n_Sp8 = pars[64]
    r_Coup = pars[65]
    r_Emx2 = pars[66]
    r_Fgf8 = pars[67]
    r_Pax6 = pars[68]
    r_Sp8 = pars[69]
    # Variables
    x_Sp8 = Y[0]
    p_Sp8 = Y[1]
    x_Fgf8 = Y[2]
    p_Fgf8 = Y[3]
    x_Emx2 = Y[4]
    p_Emx2 = Y[5]
    x_Pax6 = Y[6]
    p_Pax6 = Y[7]
    x_Coup = Y[8]
    p_Coup = Y[9]
    dx_Sp8 = m_Sp8*(( alpha_Sp8 + a_Sp8_Fgf8*(p_Fgf8/k_Fgf8)**n_Fgf8 + a_Sp8_Emx2*(p_Emx2/k_Emx2)**n_Emx2 + a_Sp8_Fgf8_Emx2*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Emx2/k_Emx2)**n_Emx2 )/( 1 +(p_Fgf8/k_Fgf8)**n_Fgf8 +(p_Emx2/k_Emx2)**n_Emx2 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Emx2/k_Emx2)**n_Emx2 ))-l_x_Sp8*x_Sp8
    dp_Sp8 = r_Sp8*x_Sp8- l_p_Sp8*p_Sp8
    dx_Fgf8 = m_Fgf8*(( alpha_Fgf8 + a_Fgf8_Fgf8*(p_Fgf8/k_Fgf8)**n_Fgf8 + a_Fgf8_Sp8*(p_Sp8/k_Sp8)**n_Sp8 + a_Fgf8_Emx2*(p_Emx2/k_Emx2)**n_Emx2 + a_Fgf8_Fgf8_Sp8*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 + a_Fgf8_Fgf8_Emx2*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Emx2/k_Emx2)**n_Emx2 + a_Fgf8_Sp8_Emx2*(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 + a_Fgf8_Fgf8_Sp8_Emx2*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 )/( 1 +(p_Fgf8/k_Fgf8)**n_Fgf8 +(p_Sp8/k_Sp8)**n_Sp8 +(p_Emx2/k_Emx2)**n_Emx2 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Emx2/k_Emx2)**n_Emx2 +(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 ))-l_x_Fgf8*x_Fgf8
    dp_Fgf8 = r_Fgf8*x_Fgf8- l_p_Fgf8*p_Fgf8
    dx_Emx2 = m_Emx2*(( alpha_Emx2 + a_Emx2_Coup*(p_Coup/k_Coup)**n_Coup + a_Emx2_Fgf8*(p_Fgf8/k_Fgf8)**n_Fgf8 + a_Emx2_Sp8*(p_Sp8/k_Sp8)**n_Sp8 + a_Emx2_Pax6*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Coup_Fgf8*(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8 + a_Emx2_Coup_Sp8*(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8 + a_Emx2_Coup_Pax6*(p_Coup/k_Coup)**n_Coup*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Fgf8_Sp8*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 + a_Emx2_Fgf8_Pax6*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Sp8_Pax6*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Coup_Fgf8_Sp8*(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 + a_Emx2_Coup_Fgf8_Pax6*(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Coup_Sp8_Pax6*(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Fgf8_Sp8_Pax6*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 + a_Emx2_Coup_Fgf8_Sp8_Pax6*(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 )/( 1 +(p_Coup/k_Coup)**n_Coup +(p_Fgf8/k_Fgf8)**n_Fgf8 +(p_Sp8/k_Sp8)**n_Sp8 +(p_Pax6/k_Pax6)**n_Pax6 +(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8 +(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8 +(p_Coup/k_Coup)**n_Coup*(p_Pax6/k_Pax6)**n_Pax6 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Pax6/k_Pax6)**n_Pax6 +(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 +(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 +(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Pax6/k_Pax6)**n_Pax6 +(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 +(p_Coup/k_Coup)**n_Coup*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8*(p_Pax6/k_Pax6)**n_Pax6 ))-l_x_Emx2*x_Emx2
    dp_Emx2 = r_Emx2*x_Emx2- l_p_Emx2*p_Emx2
    dx_Pax6 = m_Pax6*(( alpha_Pax6 + a_Pax6_Coup*(p_Coup/k_Coup)**n_Coup + a_Pax6_Sp8*(p_Sp8/k_Sp8)**n_Sp8 + a_Pax6_Emx2*(p_Emx2/k_Emx2)**n_Emx2 + a_Pax6_Coup_Sp8*(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8 + a_Pax6_Coup_Emx2*(p_Coup/k_Coup)**n_Coup*(p_Emx2/k_Emx2)**n_Emx2 + a_Pax6_Sp8_Emx2*(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 + a_Pax6_Coup_Sp8_Emx2*(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 )/( 1 +(p_Coup/k_Coup)**n_Coup +(p_Sp8/k_Sp8)**n_Sp8 +(p_Emx2/k_Emx2)**n_Emx2 +(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8 +(p_Coup/k_Coup)**n_Coup*(p_Emx2/k_Emx2)**n_Emx2 +(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 +(p_Coup/k_Coup)**n_Coup*(p_Sp8/k_Sp8)**n_Sp8*(p_Emx2/k_Emx2)**n_Emx2 ))-l_x_Pax6*x_Pax6
    dp_Pax6 = r_Pax6*x_Pax6- l_p_Pax6*p_Pax6
    dx_Coup = m_Coup*(( alpha_Coup + a_Coup_Fgf8*(p_Fgf8/k_Fgf8)**n_Fgf8 + a_Coup_Sp8*(p_Sp8/k_Sp8)**n_Sp8 + a_Coup_Fgf8_Sp8*(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 )/( 1 +(p_Fgf8/k_Fgf8)**n_Fgf8 +(p_Sp8/k_Sp8)**n_Sp8 +(p_Fgf8/k_Fgf8)**n_Fgf8*(p_Sp8/k_Sp8)**n_Sp8 ))-l_x_Coup*x_Coup
    dp_Coup = r_Coup*x_Coup- l_p_Coup*p_Coup
    dY = np.array([dx_Sp8,dp_Sp8,dx_Fgf8,dp_Fgf8,dx_Emx2,dp_Emx2,dx_Pax6,dp_Pax6,dx_Coup,dp_Coup,])
    return(dY)
#####################################################